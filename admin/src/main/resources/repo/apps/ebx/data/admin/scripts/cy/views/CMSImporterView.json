{"type":"cy:bean","properties":{"beanType@STRING":"cy:requiremodule","name@STRING":"CMSImporterView","dependencies@STRING":["/libs/bndly/data/scripts/cy/form/Forms","/libs/bndly/data/scripts/cy/CopyUtil","/libs/bndly/data/scripts/cy/Value","/libs/bndly/data/scripts/cy/ui/Text","/libs/bndly/data/scripts/cy/FormBinder","/libs/bndly/data/scripts/cy/ProgressBar","/libs/bndly/data/scripts/cy/ui/container/Form","/libs/bndly/data/scripts/cy/ui/input/SelectInput","/libs/bndly/data/scripts/cy/ui/ViewComponent","/libs/bndly/data/scripts/cy/ui/container/ViewContainer","/libs/bndly/data/scripts/cy/ui/container/ButtonGroup","/libs/bndly/data/scripts/cy/ui/input/Button","/libs/bndly/data/scripts/cy/RestBeans"],"script@STRING":"var CMSImporterView = ViewComponent.extend({\r\n\tconstruct: function(config) {\r\n\t\tif (!config) {\r\n\t\t\tconfig = {};\r\n\t\t}\r\n\t\tconfig.titleText = new Text({value: \"CMS Importer Status\", tag: \"h1\"});\r\n\t\tconfig.stateLabel = new Text({value: \"\", tag: \"p\"});\r\n\t\tconfig.progressBar = new ProgressBar({\r\n\t\t\thidden: true\r\n\t\t});\r\n\t\tconfig.triggerButton = new Button({\r\n\t\t\tlabel: \"trigger\",\r\n\t\t\tlisteners: {\r\n\t\t\t\tclicked: {\r\n\t\t\t\t\tfn: this.triggerButtonClicked,\r\n\t\t\t\t\tscope: this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tconfig.fullSyncButton = new Button({\r\n\t\t\tlabel: \"full sync\",\r\n\t\t\tlisteners: {\r\n\t\t\t\tclicked: {\r\n\t\t\t\t\tfn: this.fullSyncButtonClicked,\r\n\t\t\t\t\tscope: this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tconfig.enableToggleButton = new Button({\r\n\t\t\tlabel: \"enable\",\r\n\t\t\tlisteners: {\r\n\t\t\t\tclicked: {\r\n\t\t\t\t\tfn: this.enableToggleButtonClicked,\r\n\t\t\t\t\tscope: this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tconfig.reloadConfigButton = new Button({\r\n\t\t\tlabel: \"reload config\",\r\n\t\t\tlisteners: {\r\n\t\t\t\tclicked: {\r\n\t\t\t\t\tfn: this.reloadConfigButtonClicked,\r\n\t\t\t\t\tscope: this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tconfig.saveConfigButton = new Button({\r\n\t\t\tlabel: \"save config\",\r\n\t\t\tdisabled: true,\r\n\t\t\tlisteners: {\r\n\t\t\t\tclicked: {\r\n\t\t\t\t\tfn: this.saveConfigButtonClicked,\r\n\t\t\t\t\tscope: this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tconfig.buttonGroup = new ButtonGroup({\r\n\t\t\titems: [\r\n\t\t\t\tconfig.enableToggleButton,\r\n\t\t\t\tconfig.triggerButton,\r\n\t\t\t\tconfig.fullSyncButton,\r\n\t\t\t\tconfig.reloadConfigButton,\r\n\t\t\t\tconfig.saveConfigButton\r\n\t\t\t]\r\n\t\t});\r\n\t\tconfig.configSelection = new SelectInput({\r\n\t\t\tlabel: \"Available Configurations\",\r\n\t\t\tentryValueFn: function(entry) {\r\n\t\t\t\tif(entry) {\r\n\t\t\t\t\treturn entry.hasLink(\"self\").getHref();\t\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tentryLabelFn: function(entry) {\r\n\t\t\t\tif(entry) {\r\n\t\t\t\t\treturn entry.getName() + (entry.getActive() ? \" (active)\" : \"\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tconfig.container = new ViewContainer({\r\n\t\t\titems: [\r\n\t\t\t\tconfig.buttonGroup,\r\n\t\t\t\tnew Form({\r\n\t\t\t\t\titems: [config.configSelection]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t});\r\n\t\tthis.callSuper(arguments, config);\r\n\t\tthis.currentStatus = new Value({\r\n\t\t\tlisteners: {\r\n\t\t\t\tchanged: {\r\n\t\t\t\t\tfn: this.statusChanged,\r\n\t\t\t\t\tscope: this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.loadActivateConfiguration();\r\n\t},\r\n\tdestroy: function() {\r\n\t\tthis.invokeSuper(arguments);\r\n\t\tthis.titleText.destroy();\r\n\t},\r\n\trenderTo: function(renderTarget) {\r\n\t\tthis.renderTitle(renderTarget);\r\n\t\tthis.stateLabel.renderTo($(renderTarget));\r\n\t\tthis.progressBar.renderTo(renderTarget);\r\n\t\tthis.container.renderTo(renderTarget);\r\n\t\tthis.invokeSuper(arguments);\r\n\t\tthis.loadStatus(this.receivedStatus, this);\r\n\t\tthis.disableAllButtons();\r\n\t},\r\n\tloadStatus: function(cb, scope) {\r\n\t\tif(!cb && !scope) {\r\n\t\t\tcb = this.receivedStatus;\r\n\t\t\tscope = this;\r\n\t\t}\r\n\t\tRestBeans.root.follow({\r\n\t\t\trel:\"importer\",\r\n\t\t\tcb: cb,\r\n\t\t\tscope: scope\r\n\t\t});\r\n\t},\r\n\trenderTitle: function(renderTarget) {\r\n\t\tif (this.titleText) {\r\n\t\t\tthis.titleText.renderTo(renderTarget);\r\n\t\t}\r\n\t},\r\n\trenderStateLabel: function(status) {\r\n\t\tvar connected = \"\";\r\n\t\tif(status.getConnected()) {\r\n\t\t\tconnected = \"connected and \";\r\n\t\t}\r\n\t\tif(status.getEnabled()) {\r\n\t\t\tthis.enableToggleButton.setLabel(\"disable\");\r\n\t\t\tif(status.getRunning()) {\r\n\t\t\t\tthis.stateLabel.value.set(\"Importer is \"+connected+\"running.\");\r\n\t\t\t} else {\r\n\t\t\t\tthis.stateLabel.value.set(\"Importer is \"+connected+\"enabled.\");\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.enableToggleButton.setLabel(\"enable\");\r\n\t\t\tthis.stateLabel.value.set(\"Importer is \"+connected+\"disabled.\");\r\n\t\t}\r\n\t},\r\n\treceivedStatus: function(status) {\r\n\t\tthis.currentStatus.set(status);\r\n\t},\r\n\tstopUpdate: function(status) {\r\n\t\tif(!status.getRunning()) {\r\n\t\t\tthis.enableAllButtons();\r\n\t\t\tstatus.removeListener(\"reloaded\", this.updateProgressBar, this);\r\n\t\t\tstatus.removeListener(\"reloaded\", this.stopUpdate, this);\r\n\t\t\tthis.progressBar.hide();\r\n\t\t\treturn false;\r\n\t\t};\r\n\t},\r\n\ttriggerButtonClicked: function() {\r\n\t\tthis.disableAllButtons();\r\n\t\tthis.loadStatus(function(status){\r\n\t\t\tthis.renderStateLabel(status);\r\n\t\t\tthis.progressBar.setPercent(0);\r\n\t\t\tthis.progressBar.show();\r\n\t\t\tstatus.follow({\r\n\t\t\t\trel: \"trigger\",\r\n\t\t\t\tcb: function() {\r\n\t\t\t\t\tstatus.removeListener(\"reloaded\", this.updateProgressBar, this);\r\n\t\t\t\t\tthis.importingFinished();\r\n\t\t\t\t},\r\n\t\t\t\tscope: this\r\n\t\t\t});\r\n\t\t\tstatus.addListener(\"reloaded\", this.updateProgressBar, this);\r\n\t\t\tstatus.reload();\r\n\t\t}, this);\r\n\t},\r\n\tstatusChanged: function(status) {\r\n\t\tif(status) {\r\n\t\t\tthis.renderStateLabel(status);\r\n\t\t\tif(status.getRunning()) {\r\n\t\t\t\tthis.progressBar.show();\r\n\t\t\t\tstatus.addListener(\"reloaded\", this.updateProgressBar, this);\r\n\t\t\t\tstatus.addListener(\"reloaded\", this.stopUpdate, this);\r\n\t\t\t\tstatus.reload();\r\n\t\t\t} else {\r\n\t\t\t\tthis.enableAllButtons();\r\n\t\t\t}\r\n\t\t\tif(status.getEnabled()) {\r\n\t\t\t\tthis.enableToggleButton.setLabel(\"disable\");\r\n\t\t\t} else {\r\n\t\t\t\tthis.enableToggleButton.setLabel(\"enable\");\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tenableToggleButtonClicked: function() {\r\n\t\tif(this.currentStatus.get()) {\r\n\t\t\tvar rel = \"enable\";\r\n\t\t\tif(this.currentStatus.get().getEnabled()) {\r\n\t\t\t\trel = \"disable\";\r\n\t\t\t}\r\n\t\t\tthis.currentStatus.get().follow({\r\n\t\t\t\trel: rel,\r\n\t\t\t\tcb: this.loadStatus,\r\n\t\t\t\tscope: this\r\n\t\t\t});\r\n\t\t}\r\n\t},\r\n\treloadConfigButtonClicked: function() {\r\n\t\tthis.disableAllButtons();\r\n\t\t\r\n\t\tthis.loadStatus(function(status){\r\n\t\t\tstatus.follow({\r\n\t\t\t\trel: \"reloadConfig\",\r\n\t\t\t\tcb: function() {\r\n\t\t\t\t\tthis.enableAllButtons();\r\n\t\t\t\t},\r\n\t\t\t\tscope: this\r\n\t\t\t});\r\n\t\t}, this);\r\n\t},\r\n\tupdateProgressBar: function(status) {\r\n\t\tthis.renderStateLabel(status);\r\n\t\tthis.progressBar.setPercent(parseInt(status.getDone()*100));\r\n\t\t// let's poll the progress\r\n\t\tsetTimeout(function() {\r\n\t\t\tstatus.reload();\r\n\t\t}, 2000);\r\n\t},\r\n\tenableAllButtons: function() {\r\n\t\tthis.triggerButton.enable();\r\n\t\tthis.fullSyncButton.enable();\r\n\t\tthis.enableToggleButton.enable();\r\n\t\tthis.reloadConfigButton.enable();\r\n\t},\r\n\tdisableAllButtons: function() {\r\n\t\tthis.triggerButton.disable();\r\n\t\tthis.fullSyncButton.disable();\r\n\t\tthis.enableToggleButton.disable();\r\n\t\tthis.reloadConfigButton.disable();\r\n\t},\r\n\tfullSyncButtonClicked: function() {\r\n\t\tthis.disableAllButtons();\r\n\t\t\r\n\t\tthis.loadStatus(function(status){\r\n\t\t\tthis.renderStateLabel(status);\r\n\t\t\tthis.progressBar.setPercent(0);\r\n\t\t\tthis.progressBar.show();\r\n\t\t\tstatus.follow({\r\n\t\t\t\trel: \"fullSync\",\r\n\t\t\t\tcb: function() {\r\n\t\t\t\t\tstatus.removeListener(\"reloaded\", this.updateProgressBar, this);\r\n\t\t\t\t\tthis.importingFinished();\r\n\t\t\t\t},\r\n\t\t\t\tscope: this\r\n\t\t\t});\r\n\t\t\tstatus.addListener(\"reloaded\", this.updateProgressBar, this);\r\n\t\t\tstatus.reload();\r\n\t\t}, this);\r\n\t},\r\n\timportingFinished: function() {\r\n\t\tthis.enableAllButtons();\r\n\t\tthis.progressBar.setPercent(100);\r\n\t\tthis.loadStatus(function(status){\r\n\t\t\tthis.progressBar.hide();\r\n\t\t\tthis.renderStateLabel(status);\r\n\t\t}, this);\r\n\t},\r\n\tloadActivateConfiguration: function() {\r\n\t\tvar _this = this;\r\n\t\tRestBeans.root.follow({\r\n\t\t\trel: \"schema\",\r\n\t\t\tcb: function(schemaList){\r\n\t\t\t\tif(schemaList.getItems()) {\r\n\t\t\t\t\tschemaList.getItems().each(function(schema){\r\n\t\t\t\t\t\tif(schema.getName() === \"ebx\") {\r\n\t\t\t\t\t\t\tschema.getTypes().each(function(type) {\r\n\t\t\t\t\t\t\t\tif(type.getName() === \"ImporterConfiguration\") {\r\n\t\t\t\t\t\t\t\t\t_this.initImporterConfigurations(type);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\tinitImporterConfigurations: function(type) {\r\n\t\ttype.follow({\r\n\t\t\trel: \"primaryResource\",\r\n\t\t\tcb: function(configurations) {\r\n\t\t\t\tconsole.log(\"got configs\");\r\n\t\t\t\tconsole.log(configurations);\r\n\t\t\t\tconfigurations.getItems().each(function(config) {\r\n\t\t\t\t\tthis.configSelection.items.add(config);\r\n\t\t\t\t\tif(config.getActive()) {\r\n\t\t\t\t\t\tthis.activeConfig = config;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t\tif(this.activeConfig) {\r\n\t\t\t\t\tvar formBinderView = this.createFormBinderFromConfiguration(this.activeConfig);\r\n\t\t\t\t\tthis.container.items.add(formBinderView);\r\n\t\t\t\t\tthis.saveConfigButton.enable();\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tscope: this\r\n\t\t});\r\n\t},\r\n\tcreateFormBinderFromConfiguration: function(configuration) {\r\n\t\tvar sections;\r\n\t\ttry {\r\n\t\t\tsections = Forms[\"ImporterConfigurationRestBean\"];\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t\tif (!sections) {\r\n\t\t\tsections = {};\r\n\t\t} else {\r\n\t\t\tif (sections instanceof Array) {\r\n\t\t\t\tsections = {\r\n\t\t\t\t\tsections: sections\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar formBinderView = new FormBinder(CopyUtil.copyConfig(sections, {\r\n\t\t\tentity: configuration,\r\n\t\t\t// keyedInputs: config.keyedInputs,\r\n\t\t\tignoredMembers: {\r\n\t\t\t\tlinks: true,\r\n\t\t\t\tpage: true\r\n\t\t\t}\r\n\t\t}));\r\n\t\treturn formBinderView;\r\n\t},\r\n\tsaveConfigButtonClicked: function() {\r\n\t\tif(this.activeConfig) {\r\n\t\t\tthis.activeConfig.persist();\r\n\t\t}\r\n\t}\r\n});\r\nreturn CMSImporterView;","initMethod@STRING":"","proxy@STRING":"","moduleId@STRING":""}}