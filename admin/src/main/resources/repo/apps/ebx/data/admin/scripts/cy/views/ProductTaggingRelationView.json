{"type":"cy:bean","properties":{"beanType@STRING":"cy:requiremodule","name@STRING":"ProductTaggingRelationView","dependencies@STRING":["/libs/bndly/data/scripts/cy/ui/input/StringListInput","/libs/bndly/data/scripts/cy/EntityCollection","/libs/bndly/data/scripts/cy/Collection","/libs/bndly/data/scripts/cy/ui/container/Form","/libs/bndly/data/scripts/cy/RestBeans","/libs/bndly/data/scripts/cy/EntityRelationViewComponent"],"script@STRING":"var ProductTaggingRelationView = EntityRelationViewComponent.extend({\r\n\tconstruct: function(config) {\r\n\t\tif (!config) {\r\n\t\t\tconfig = {};\r\n\t\t}\r\n\r\n\t\tvar tagNamesOfProduct = new Collection();\r\n\t\tconfig.tagNamesOfProduct = tagNamesOfProduct;\r\n\r\n\t\tconfig.newTagNameInput = new StringListInput({\r\n\t\t\tname: \"tagNames\",\r\n\t\t\tlabel: \"Tags\",\r\n\t\t\tvalues: tagNamesOfProduct\r\n\t\t});\r\n\t\tconfig.form = new Form({\r\n\t\t\titems: [\r\n\t\t\t\tconfig.newTagNameInput\r\n\t\t\t]\r\n\t\t});\r\n\t\tconfig.items = [\r\n\t\t\tconfig.form\r\n\t\t];\r\n\r\n\t\tvar tagAssociationProto = new RestBeans.TagAssociationRestBean();\r\n\t\tvar p = new RestBeans[config.parent.clazzName()];\r\n\t\tvar self = config.parent.hasLink(\"self\");\r\n\t\tif(self) {\r\n\t\t\tp.setLink(\"self\", self.getHref());\r\n\t\t\ttagAssociationProto.setProduct(p);\t\r\n\t\t}\r\n\t\t\r\n\t\tconfig.productTagAssociations = new EntityCollection({\r\n\t\t\tproto: tagAssociationProto\r\n\t\t});\r\n\t\tconfig.productTags = new EntityCollection({\r\n\t\t\tproto: new RestBeans.TagRestBean()\r\n\t\t});\r\n\t\tconfig.tagsToRemove = new Collection();\r\n\r\n\t\tthis.callSuper(arguments, config);\r\n\r\n\t\tthis.listen(this.productTagAssociations, \"allLoaded\", this.allAssociationsLoaded, this);\r\n\t\tthis.listen(this.productTags, \"allLoaded\", this.allTagsLoaded, this);\r\n\r\n\t\tif(self) {\r\n\t\t\tthis.productTagAssociations.load();\r\n\t\t}\r\n\t\tconsole.log(\"loading product tags\");\r\n\t\tthis.productTags.load();\r\n\r\n\t\t// load the already defined variant model attributes for the product\r\n\t\tthis.listen(this.parent, \"persisted\", this.productPersisted, this);\r\n\t\tthis.listen(this.tagNamesOfProduct, \"removed\", this.tagNameRemoved, this);\r\n\t},\r\n\trenderTo: function(renderTarget) {\r\n\t\tthis.invokeSuper(arguments);\r\n\t},\r\n\tallAssociationsLoaded: function() {\r\n\t\tconsole.log(\"loaded all tag associations\");\r\n\t\tthis.associationsLoaded = true;\r\n\t\tif(!this.tagAssociationsByTagId) {\r\n\t\t\tthis.tagAssociationsByTagId = {};\r\n\t\t}\r\n\t\tthis.productTagAssociations.each(function(assoc){\r\n\t\t\tvar tag = assoc.getTag();\r\n\t\t\tif(tag) {\r\n\t\t\t\tthis.tagAssociationsByTagId[tag.getId()] = assoc;\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tthis.applyTags();\r\n\t},\r\n\tallTagsLoaded: function() {\r\n\t\tconsole.log(\"loaded all tags\");\r\n\t\tthis.tagsLoaded = true;\r\n\t\t\r\n\t\tthis.tagsById = {};\r\n\t\tthis.tagsByName = {};\r\n\t\tthis.productTags.each(function(tag){\r\n\t\t\tthis.tagsById[tag.getId()] = tag;\r\n\t\t\tthis.tagsByName[tag.getName()] = tag;\r\n\t\t}, this);\r\n\t\t\r\n\t\tthis.applyTags();\r\n\t},\r\n\tapplyTags: function() {\r\n\t\tif(this.tagsLoaded && this.associationsLoaded) {\r\n\t\t\tthis.productTagAssociations.each(function(assoc){\r\n\t\t\t\tvar t = assoc.getTag();\r\n\t\t\t\tif(t) {\r\n\t\t\t\t\tvar tag = this.tagsById[t.getId()];\r\n\t\t\t\t\tassoc.setTag(tag);\r\n\t\t\t\t\tthis.tagNamesOfProduct.add(tag.getName());\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t}\r\n\r\n\t},\r\n\tcreatedNewTagAssociation: function(assoc) {\r\n\t\tthis.productTagAssociations.add(assoc);\r\n\t\tif(!this.tagAssociationsByTagId) {\r\n\t\t\tthis.tagAssociationsByTagId = {};\r\n\t\t}\r\n\t\tthis.tagAssociationsByTagId[assoc.getTag().getId()] = assoc;\r\n\t},\r\n\tcreatedNewTag: function(tag) {\r\n\t\tthis.tagsById[tag.getId()] = tag;\r\n\t\tthis.tagsByName[tag.getName()] = tag;\r\n\t},\r\n\tproductPersisted: function(product) {\r\n\t\tthis.tagNamesOfProduct.each(function(tagName) {\r\n\t\t\tvar tag = this.tagsByName[tagName];\r\n\t\t\tif(tag) {\r\n\t\t\t\tif(!this.tagAssociationsByTagId) {\r\n\t\t\t\t\tthis.tagAssociationsByTagId = {};\r\n\t\t\t\t}\r\n\t\t\t\tvar assoc = this.tagAssociationsByTagId[tag.getId()];\r\n\t\t\t\tif(!assoc) {\r\n\t\t\t\t\tconsole.log(\"persisting new '\"+tagName+\"' association for existing tag\");\r\n\t\t\t\t\t// only persist new tag associations\r\n\t\t\t\t\tassoc = new RestBeans.TagAssociationRestBean();\r\n\t\t\t\t\tassoc.setProduct(product.ref());\r\n\t\t\t\t\tassoc.setTag(tag.ref());\r\n\t\t\t\t\tassoc.persistAndReload();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// create tag first\r\n\t\t\t\tconsole.log(\"persisting new '\"+tagName+\"' tag\");\r\n\t\t\t\ttag = new RestBeans.TagRestBean();\r\n\t\t\t\ttag.setName(tagName);\r\n\t\t\t\ttag.addListener(\"reloaded\", function(persisted){\r\n\t\t\t\t\tthis.createdNewTag(persisted);\r\n\t\t\t\t\tconsole.log(\"persisting new '\"+tagName+\"' association for newly persisted tag\");\r\n\t\t\t\t\tvar assoc = new RestBeans.TagAssociationRestBean();\r\n\t\t\t\t\tassoc.setProduct(product.ref());\r\n\t\t\t\t\tassoc.setTag(persisted.ref());\r\n\t\t\t\t\tassoc.addListener(\"persisted\", this.createdNewTagAssociation, this);\r\n\t\t\t\t\tassoc.persistAndReload();\r\n\t\t\t\t}, this);\r\n\t\t\t\ttag.persistAndReload();\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\t\r\n\t\tthis.tagsToRemove.each(function(tagName){\r\n\t\t\tconsole.log(\"should remove tag '\"+tagName+\"'\");\r\n\t\t\tvar tag = this.tagsByName[tagName];\r\n\t\t\tif(tag) {\r\n\t\t\t\tconsole.log(\"-- found tag '\"+tagName+\"'\");\r\n\t\t\t\tvar assoc = this.tagAssociationsByTagId[tag.getId()];\r\n\t\t\t\tif(assoc) {\r\n\t\t\t\t\tconsole.log(\"-- found tag '\"+tagName+\"' association\");\r\n\t\t\t\t\tassoc.remove();\r\n\t\t\t\t\tthis.tagAssociationsByTagId[tag.getId()] = undefined;\r\n\t\t\t\t\tthis.productTagAssociations.remove(assoc);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tthis.tagsToRemove.clear();\r\n\t},\r\n\ttagNameRemoved: function(tagName) {\r\n\t\tthis.tagsToRemove.add(tagName);\r\n\t}\r\n});\r\nreturn ProductTaggingRelationView;","initMethod@STRING":"","proxy@STRING":"","moduleId@STRING":""}}