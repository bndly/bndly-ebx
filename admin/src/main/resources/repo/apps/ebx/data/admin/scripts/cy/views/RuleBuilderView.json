{"type":"cy:bean","properties":{"beanType@STRING":"cy:requiremodule","name@STRING":"RuleBuilderView","dependencies@STRING":["/libs/bndly/data/scripts/cy/ui/container/ViewContainer","/libs/bndly/data/scripts/cy/CopyUtil","/libs/bndly/data/scripts/cy/ui/ViewComponent","/libs/bndly/data/scripts/cy/Collection","/libs/bndly/data/scripts/cy/ui/input/BooleanInput","/libs/bndly/data/scripts/cy/ui/input/TextInput","/libs/bndly/data/scripts/cy/RestBeans","/libs/bndly/data/scripts/cy/ui/Text"],"script@STRING":"\tvar ConstraintTable = ViewComponent.extend({\r\n\t\tconstruct: function (config) {\r\n\t\t\tif (!config) {\r\n\t\t\t\tconfig = {};\r\n\t\t\t}\r\n\t\t\tvar defaultNumberCfg = {\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tstep: 1,\r\n\t\t\t\tcssClass: \"input-mini\"\r\n\t\t\t};\r\n\t\t\tconfig.constraints = new Collection();\r\n\t\t\tconfig.constraints.add({\r\n\t\t\t\thandler: this.createNotEmpty,\r\n\t\t\t\tlabel: \"not empty\",\r\n\t\t\t\texpression: \"*and->not->empty->value\",\r\n\t\t\t\tinput: BooleanInput\r\n\t\t\t});\r\n\t\t\tconfig.constraints.add({\r\n\t\t\t\thandler: this.createMinLength,\r\n\t\t\t\tlabel: \"min length\",\r\n\t\t\t\texpression: \"*and->not->maxSize->value[name=value],value[name=size]\",\r\n\t\t\t\tinputExpression: \"*and->not->maxSize->value[name=size]\",\r\n\t\t\t\tallowOn: {\r\n\t\t\t\t\tString: true,\r\n\t\t\t\t\tCollection: true\r\n\t\t\t\t},\r\n\t\t\t\tinput: TextInput,\r\n\t\t\t\tinputConfig: CopyUtil.copyConfig(defaultNumberCfg, {\r\n\t\t\t\t\tmin: 0\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tconfig.constraints.add({\r\n\t\t\t\thandler: this.createMaxLength,\r\n\t\t\t\tlabel: \"max length\",\r\n\t\t\t\texpression: \"*and->maxSize->value[name=value],value[name=size]\",\r\n\t\t\t\tinputExpression: \"*and->not->maxSize->value[name=size]\",\r\n\t\t\t\tallowOn: {\r\n\t\t\t\t\tString: true,\r\n\t\t\t\t\tCollection: true\r\n\t\t\t\t},\r\n\t\t\t\tinput: TextInput,\r\n\t\t\t\tinputConfig: CopyUtil.copyConfig(defaultNumberCfg, {\r\n\t\t\t\t\tmin: 0\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tconfig.constraints.add({\r\n\t\t\t\thandler: this.createGreaterThan,\r\n\t\t\t\tlabel: \"greater than\",\r\n\t\t\t\texpression: \"*and->intervall->value[name=value],value[name=left]\",\r\n\t\t\t\tinputExpression: \"*and->intervall->value[name=left]\",\r\n\t\t\t\tallowOn: {\r\n\t\t\t\t\tNumber: true\r\n\t\t\t\t},\r\n\t\t\t\tinput: TextInput,\r\n\t\t\t\tinputConfig: CopyUtil.copyConfig(defaultNumberCfg, {\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tconfig.constraints.add({\r\n\t\t\t\thandler: this.createLowerThan,\r\n\t\t\t\tlabel: \"lower than\",\r\n\t\t\t\texpression: \"*and->intervall->value[name=value],value[name=right]\",\r\n\t\t\t\tinputExpression: \"*and->intervall->value[name=right]\",\r\n\t\t\t\tallowOn: {\r\n\t\t\t\t\tNumber: true\r\n\t\t\t\t},\r\n\t\t\t\tinput: TextInput,\r\n\t\t\t\tinputConfig: CopyUtil.copyConfig(defaultNumberCfg, {\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tconfig.constraints.add({\r\n\t\t\t\thandler: this.createPositive,\r\n\t\t\t\tlabel: \"positive\",\r\n\t\t\t\texpression: \"*and->intervall->value[name=value],value[name=left,numeric=0]\",\r\n\t\t\t\tallowOn: {\r\n\t\t\t\t\tNumber: true\r\n\t\t\t\t},\r\n\t\t\t\tinput: BooleanInput\r\n\t\t\t});\r\n\t\t\tconfig.constraints.add({\r\n\t\t\t\thandler: this.createBeforeNow,\r\n\t\t\t\tlabel: \"before now\",\r\n\t\t\t\texpression: \"*and->intervall->value[name=value],value[name=right,dateOfNow=true]\",\r\n\t\t\t\tallowOn: {\r\n\t\t\t\t\tDate: true\r\n\t\t\t\t},\r\n\t\t\t\tinput: BooleanInput\r\n\t\t\t});\r\n\t\t\tconfig.constraints.add({\r\n\t\t\t\thandler: this.createAfterNow,\r\n\t\t\t\tlabel: \"after now\",\r\n\t\t\t\texpression: \"*and->intervall->value[name=value],value[name=left,dateOfNow=true]\",\r\n\t\t\t\tallowOn: {\r\n\t\t\t\t\tDate: true\r\n\t\t\t\t},\r\n\t\t\t\tinput: BooleanInput\r\n\t\t\t});\r\n\t\t\tconfig.constraints.add({\r\n\t\t\t\thandler: this.createPrecision,\r\n\t\t\t\tlabel: \"precision\",\r\n\t\t\t\texpression: \"*and->precision->value[name=value],value[name=decimal]\",\r\n\t\t\t\tallowOn: {\r\n\t\t\t\t\tNumber: true\r\n\t\t\t\t},\r\n\t\t\t\tinput: TextInput,\r\n\t\t\t\tinputConfig: CopyUtil.copyConfig(defaultNumberCfg, {\r\n\t\t\t\t\tmin: 0\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\tif (!config.attributes) {\r\n\t\t\t\tconfig.attributes = new Collection();\r\n\t\t\t} else {\r\n\t\t\t\tif (!(config instanceof Collection)) {\r\n\t\t\t\t\tconfig.attributes = new Collection(config.attributes);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.callSuper(arguments, config);\r\n\t\t\tthis.listen(this.attributes, \"inserted\", this.renderAttributeRow, this);\r\n\t\t\tthis.listen(this.attributes, \"removed\", this.removeAttributeRow, this);\r\n\t\t},\r\n\t\trenderTo: function (renderTarget) {\r\n\t\t\tthis.table = $(renderTarget).append(\"<table class=\\\"table table-condensed\\\"></table>\").children().last();\r\n\t\t\tthis.tableHead = $(this.table).append(\"<thead></thead>\").children().last();\r\n\t\t\tthis.tableBody = $(this.table).append(\"<tbody></tbody>\").children().last();\r\n\t\t\tthis.tableHeadRow = $(this.tableHead).append(\"<tr></tr>\").children().last();\r\n\t\t\tthis.tableAttributeHeaderColumn = this.renderHeaderColumn(\"Attribute\");\r\n\t\t\tthis.attributeBindings = {};\r\n\t\t\tthis.constraints.each(function (constraint) {\r\n\t\t\t\tconstraint.td = this.renderHeaderColumn(constraint.label);\r\n\t\t\t}, this);\r\n\t\t\tthis.renderAttributes();\r\n\t\t\tthis.callSuper(arguments, renderTarget);\r\n\t\t},\r\n\t\trenderHeaderColumn: function (label) {\r\n\t\t\treturn this.renderColumn(label, this.tableHeadRow, \"th\");\r\n\t\t},\r\n\t\trenderColumn: function (label, target, tag) {\r\n\t\t\tif (!tag) {\r\n\t\t\t\ttag = \"td\";\r\n\t\t\t}\r\n\t\t\tvar td = new Text({tag:tag, value: label});\r\n\t\t\ttd.renderTo($(target));\r\n\t\t\treturn td;\r\n\t\t},\r\n\t\trenderAttributes: function () {\r\n\t\t\tif (this.attributes) {\r\n\t\t\t\tthis.attributes.each(function (attribute) {\r\n\t\t\t\t\tthis.renderAttributeRow(attribute);\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t},\r\n\t\tremoveAttributeRow: function (attribute) {\r\n\t\t\tvar binding = this.attributeBindings[attribute.getName()];\r\n\t\t\t$(binding.row).remove();\r\n\t\t\tthis.attributeBindings[attribute.getName()] = undefined;\r\n\t\t},\r\n\t\trenderAttributeRow: function (attribute) {\r\n\t\t\tvar\r\n\t\t\t\t\trow = $(this.tableBody).append(\"<tr></tr>\").children().last(),\r\n\t\t\t\t\tbinding = {\r\n\t\t\t\t\t\trow: row,\r\n\t\t\t\t\t\tinputs: []\r\n\t\t\t\t\t};\r\n\t\t\tthis.attributeBindings[attribute.getName()] = binding;\r\n\t\t\tthis.renderColumn(attribute.getName(), row);\r\n\t\t\tthis.constraints.each(function (constraint) {\r\n\t\t\t\tvar col = this.renderColumn(undefined, row);\r\n\t\t\t\tvar inputElement = new constraint.input(CopyUtil.copyConfig(constraint.inputConfig, {\r\n\t\t\t\t\tdisabled: !this.constraintAppliesForAttribute(constraint, attribute),\r\n\t\t\t\t\tlisteners: {\r\n\t\t\t\t\t\tchanged: {\r\n\t\t\t\t\t\t\tfn: function (input, value) {\r\n\t\t\t\t\t\t\t\tconstraint.handler.call(this, attribute, input, value);\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tscope: this\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tbinding.inputs.push({\r\n\t\t\t\t\tconstraint: constraint,\r\n\t\t\t\t\tinput: inputElement\r\n\t\t\t\t});\r\n\t\t\t\tinputElement.renderTo(col);\r\n\t\t\t}, this);\r\n\t\t},\r\n\t\tconstraintAppliesForAttribute: function (constraint, attribute) {\r\n\t\t\tif (!constraint.allowOn) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else if (attribute instanceof RestBeans[\"StringAttributeBean\"]) {\r\n\t\t\t\treturn constraint.allowOn[\"String\"];\r\n\t\t\t} else if (attribute instanceof RestBeans[\"NamedAttributeHolderAttributeBean\"]) {\r\n\t\t\t\treturn constraint.allowOn[\"Object\"];\r\n\t\t\t} else if (attribute instanceof RestBeans[\"InverseAttributeBean\"]) {\r\n\t\t\t\treturn constraint.allowOn[\"Collection\"];\r\n\t\t\t} else if (attribute instanceof RestBeans[\"DecimalAttributeBean\"]) {\r\n\t\t\t\treturn constraint.allowOn[\"Number\"];\r\n\t\t\t} else if (attribute instanceof RestBeans[\"DateAttributeBean\"]) {\r\n\t\t\t\treturn constraint.allowOn[\"Date\"];\r\n\t\t\t} else if (attribute instanceof RestBeans[\"BooleanAttributeBean\"]) {\r\n\t\t\t\treturn constraint.allowOn[\"Boolean\"];\r\n\t\t\t} else if (attribute instanceof RestBeans[\"JSONAttributeBean\"]) {\r\n\t\t\t\treturn constraint.allowOn[\"Object\"];\r\n\t\t\t}\r\n\t\t},\r\n\t\tcreateNotEmpty: function (attribute, input, value) {\r\n\t\t\tconsole.log(\"not empty \" + attribute.getName());\r\n\t\t},\r\n\t\tcreateMinLength: function (attribute, input, value) {\r\n\t\t\tconsole.log(\"min length \" + attribute.getName());\r\n\t\t},\r\n\t\tcreateMaxLength: function (attribute, input, value) {\r\n\t\t\tconsole.log(\"max length \" + attribute.getName());\r\n\t\t},\r\n\t\tcreateGreaterThan: function (attribute, input, value) {\r\n\t\t\tconsole.log(\"greater than \" + attribute.getName());\r\n\t\t},\r\n\t\tcreateLowerThan: function (attribute, input, value) {\r\n\t\t\tconsole.log(\"lower than \" + attribute.getName());\r\n\t\t},\r\n\t\tcreatePositive: function (attribute, input, value) {\r\n\t\t\tconsole.log(\"positive \" + attribute.getName());\r\n\t\t},\r\n\t\tcreateBeforeNow: function (attribute, input, value) {\r\n\t\t\tconsole.log(\"before now \" + attribute.getName());\r\n\t\t},\r\n\t\tcreateAfterNow: function (attribute, input, value) {\r\n\t\t\tconsole.log(\"after now \" + attribute.getName());\r\n\t\t},\r\n\t\tcreatePrecision: function (attribute, input, value) {\r\n\t\t\tconsole.log(\"precision \" + attribute.getName());\r\n\t\t},\r\n\t\tapplyRules: function (collection) {\r\n\t\t\tthis.rules = collection;\r\n\t\t\tcollection.each(function (ruleFn) {\r\n\t\t\t\tthis.applyRule(ruleFn);\r\n\t\t\t}, this);\r\n\t\t},\r\n\t\tapplyRule: function (ruleFn) {\r\n\t\t\t// iterate over all constraints and check if the constraint expression applies to the rule function\r\n\t\t\t// if the constraint and rule function match,\r\n\t\t\t// bind the constraint input to the function parameters\r\n\r\n\t\t\tthis.constraints.each(function (constraint) {\r\n\t\t\t\tvar expression = constraint.expression;\r\n\t\t\t\tif (this.expressionApplies(expression, ruleFn)) {\r\n\t\t\t\t\tvar binding = this.attributeBindings[ruleFn.getField()];\r\n\t\t\t\t\tif (binding) {\r\n\t\t\t\t\t\tvar input;\r\n\t\t\t\t\t\tfor (var i in binding.inputs) {\r\n\t\t\t\t\t\t\tvar inputConstraintBinding = binding.inputs[i];\r\n\t\t\t\t\t\t\tif (inputConstraintBinding.constraint === constraint) {\r\n\t\t\t\t\t\t\t\tinput = inputConstraintBinding.input;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (input) {\r\n\t\t\t\t\t\t\tthis.bindConstraintToInput(constraint, input, ruleFn);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.warn(\"no input found\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.warn(\"unknown attribute: \" + ruleFn.getField());\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t},\r\n\t\texpressionApplies: function (expression, fn, anyChild, childOf) {\r\n\t\t\tif (!fn || !expression) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar\r\n\t\t\t\t\ti = expression.indexOf(\"->\"),\r\n\t\t\t\t\tisLast = i < 0;\r\n\r\n\t\t\tvar\r\n\t\t\t\t\tfragment = isLast ? expression : expression.substr(0, i),\r\n\t\t\t\t\tfurtherExpression = isLast ? undefined : expression.substr(i + \"->\".length);\r\n\t\t\tif ('*' === fragment.charAt(0)) {\r\n\t\t\t\treturn this.expressionApplies(furtherExpression, fn, true, fragment.substr(1));\r\n\t\t\t} else {\r\n\t\t\t\tvar fnForFragment = this.getParameterByExpressionFragmentMatchWithAny(fragment, fn, anyChild, childOf);\r\n\t\t\t\tif (!fnForFragment) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (isLast) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn this.expressionApplies(furtherExpression, fnForFragment, anyChild, childOf);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetParameterByExpression: function (expression, fn, anyChild, childOf) {\r\n\t\t\tif (!fn || !expression) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t\tvar i = expression.indexOf(\"->\"),\r\n\t\t\t\tisLast = i < 0;\r\n\r\n\t\t\tvar fragment = isLast ? expression : expression.substr(0, i),\r\n\t\t\t\tfurtherExpression = isLast ? undefined : expression.substr(i + \"->\".length);\r\n\t\t\tif ('*' === fragment.charAt(0)) {\r\n\t\t\t\treturn this.getParameterByExpression(furtherExpression, fn, true, fragment.substr(1));\r\n\t\t\t} else {\r\n\t\t\t\tvar fnForFragment = this.getParameterByExpressionFragmentMatchWithAny(fragment, fn, anyChild, childOf);\r\n\t\t\t\tif (!fnForFragment) {\r\n\t\t\t\t\treturn fnForFragment;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (isLast) {\r\n\t\t\t\t\t\treturn fnForFragment;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn this.getParameterByExpression(furtherExpression, fnForFragment, false, undefined);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetParameterByExpressionFragmentMatchWithAny: function (fragment, fn, anyChild, childOf) {\r\n\t\t\tvar r = this.getParameterByExpressionFragment(fragment, fn);\r\n\t\t\tif (!r && anyChild) {\r\n\t\t\t\tvar p = fn.getParameters();\r\n\t\t\t\tif (p) {\r\n\t\t\t\t\tp.getParameters().each(function (parameterFn) {\r\n\t\t\t\t\t\tif (!r) {\r\n\t\t\t\t\t\t\tif (this.functionTypeMatches(childOf, parameterFn)) {\r\n\t\t\t\t\t\t\t\tr = this.getParameterByExpressionFragmentMatchWithAny(fragment, parameterFn, anyChild, childOf);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t},\r\n\t\tgetParameterByExpressionFragment: function (fragment, fn) {\r\n\t\t\tvar p = fn.getParameters();\r\n\t\t\tif (!p) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\r\n\t\t\t// split the fragment when there is a colon\r\n\t\t\tvar inAttribute = false;\r\n\t\t\tvar elements = [];\r\n\t\t\tvar inAttributeValue;\r\n\t\t\tvar tmpAtt;\r\n\t\t\tvar tmpAttValue;\r\n\t\t\tvar tmp = {\r\n\t\t\t\tel: \"\",\r\n\t\t\t\tatts: {}\r\n\t\t\t};\r\n\t\t\tfor (var i = 0; i < fragment.length; i++) {\r\n\t\t\t\tvar char = fragment.charAt(i), isLast = (i === (fragment.length - 1));\r\n\t\t\t\tif (inAttribute) {\r\n\t\t\t\t\t// ignore\r\n\t\t\t\t\tif (']' === char) {\r\n\t\t\t\t\t\tinAttribute = false;\r\n\t\t\t\t\t\ttmp.atts[tmpAtt] = tmpAttValue;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif ('=' === char) {\r\n\t\t\t\t\t\t\tinAttributeValue = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (!inAttributeValue) {\r\n\t\t\t\t\t\t\t\ttmpAtt += char;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (',' === char) {\r\n\t\t\t\t\t\t\t\t\ttmp.atts[tmpAtt] = tmpAttValue;\r\n\t\t\t\t\t\t\t\t\ttmpAtt = \"\";\r\n\t\t\t\t\t\t\t\t\ttmpAttValue = \"\";\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\ttmpAttValue += char;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif ('[' === char) {\r\n\t\t\t\t\t\tinAttribute = true;\r\n\t\t\t\t\t\ttmpAtt = \"\";\r\n\t\t\t\t\t\ttmpAttValue = \"\";\r\n\t\t\t\t\t\tinAttributeValue = false;\r\n\t\t\t\t\t} else if (',' === char) {\r\n\t\t\t\t\t\telements.push(tmp);\r\n\t\t\t\t\t\ttmp = {\r\n\t\t\t\t\t\t\tel: \"\",\r\n\t\t\t\t\t\t\tatts: {}\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttmp.el += char;\r\n\t\t\t\t\t\tif (isLast) {\r\n\t\t\t\t\t\t\telements.push(tmp);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar result = [];\r\n\t\t\tfor (var i = 0; i < elements.length; i++) {\r\n\t\t\t\tvar element = elements[i];\r\n\t\t\t\tvar tmp2;\r\n\t\t\t\tp.getParameters().each(function (parameterFn) {\r\n\t\t\t\t\tif (tmp2) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttmp2 = this.functionTypeMatches(element.el, parameterFn);\r\n\t\t\t\t\tif (tmp2) {\r\n\t\t\t\t\t\tfor (var att in element.atts) {\r\n\t\t\t\t\t\t\tvar v = tmp2.get(att);\r\n\t\t\t\t\t\t\tif (v !== undefined && v !== null) {\r\n\t\t\t\t\t\t\t\tif (v != element.atts[att]) {\r\n\t\t\t\t\t\t\t\t\ttmp2 = undefined;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\ttmp2 = undefined;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t\tresult.push(tmp2);\r\n\t\t\t\tif (!tmp2) {\r\n\t\t\t\t\treturn undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (result.length === 1) {\r\n\t\t\t\treturn result[0];\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t},\r\n\t\tfunctionTypeMatches: function (fragment, fn) {\r\n\t\t\tif (\"not\" === fragment && (fn instanceof RestBeans[\"NotFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"empty\" === fragment && (fn instanceof RestBeans[\"EmptyFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"intervall\" === fragment && (fn instanceof RestBeans[\"IntervallFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"precision\" === fragment && (fn instanceof RestBeans[\"PrecisionFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"value\" === fragment && (fn instanceof RestBeans[\"ValueFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"and\" === fragment && (fn instanceof RestBeans[\"ANDFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"or\" === fragment && (fn instanceof RestBeans[\"ORFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"mul\" === fragment && (fn instanceof RestBeans[\"MultiplyFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"maxSize\" === fragment && (fn instanceof RestBeans[\"MaxSizeFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"charset\" === fragment && (fn instanceof RestBeans[\"CharsetFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"regex\" === fragment && (fn instanceof RestBeans[\"RegExFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else if (\"equals\" === fragment && (fn instanceof RestBeans[\"EqualsFunctionRestBean\"])) {\r\n\t\t\t\treturn fn;\r\n\t\t\t} else {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t},\r\n\t\tbindConstraintToInput: function (constraint, input, ruleFn) {\r\n//            console.log(\"bind to input\");\r\n//            console.log(ruleFn.getField() + \": \" + constraint.label);\r\n\t\t\tif (input instanceof BooleanInput) {\r\n\t\t\t\tif (ruleFn) {\r\n\t\t\t\t\tinput.setValue(true);\r\n\t\t\t\t}\r\n\t\t\t\tthis.listen(input, \"changed\", function (inp, value) {\r\n\t\t\t\t\tvar i = this.rules.indexOf(ruleFn);\r\n\t\t\t\t\tif (value) {\r\n\t\t\t\t\t\tif (i < 0) {\r\n\t\t\t\t\t\t\t// append rule\r\n\t\t\t\t\t\t\tthis.rules.add(ruleFn);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.warn(\"rule already exists in rules collection\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// remove rule\r\n\t\t\t\t\t\tif (i > -1) {\r\n\t\t\t\t\t\t\tthis.rules.removeAtIndex(i);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.warn(\"rule is not present in rules collection\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this);\r\n\t\t\t} else if (input instanceof TextInput) {\r\n\t\t\t\tif (constraint.inputExpression) {\r\n\t\t\t\t\tvar valueFn = this.getParameterByExpression(constraint.inputExpression, ruleFn);\r\n\t\t\t\t\tif (valueFn) {\r\n\t\t\t\t\t\tconsole.log(\"applying value to valueFn\");\r\n\t\t\t\t\t\tif (input.type === \"number\") {\r\n\t\t\t\t\t\t\tinput.setValue(valueFn.get(\"numeric\"));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tinput.setValue(valueFn.get(\"string\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.listen(input, \"changed\", function (inp, value) {\r\n\t\t\t\t\t\t\tif (input.type === \"number\") {\r\n\t\t\t\t\t\t\t\tvalueFn.set(\"numeric\", value);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvalueFn.set(\"string\", value);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconsole.warn(\"could not find value of for constraint with text input\");\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(\"missing inputExpression on constraint\");\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(\"unsupported input element for constraint\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\tvar RuleBuilderView = ViewContainer.extend({\r\n\t\tconstruct: function (config) {\r\n\t\t\tif (!config) {\r\n\t\t\t\tconfig = {};\r\n\t\t\t}\r\n\t\t\tvar cfg = CopyUtil.copyConfig(config.formConfig, {});\r\n\t\t\tcfg.ruleSet = config.parent;\r\n\t\t\tconfig.constraintTable = new ConstraintTable({\r\n\t\t\t\tattributes: []\r\n\t\t\t});\r\n\t\t\tconfig.attributesByType = {};\r\n\t\t\tRestBeans.root.follow({\r\n\t\t\t\trel: \"schema\",\r\n\t\t\t\tcb: this.schemaLoaded,\r\n\t\t\t\tscope: this\r\n\t\t\t});\r\n\t\t\tconfig.items = [\r\n\t\t\t\tconfig.constraintTable\r\n\t\t\t];\r\n\t\t\tthis.callSuper(arguments, config);\r\n\r\n\t\t\tif (!this.parent.getRules()) {\r\n\t\t\t\tthis.parent.setRules(new RestBeans[\"RulesRestBean\"]());\r\n\t\t\t}\r\n\t\t\tif (!this.parent.getRules().getItems()) {\r\n\t\t\t\tthis.parent.getRules().setItems(new Collection());\r\n\t\t\t}\r\n\r\n\t\t\tthis.ruleFunctions = this.parent.getRules().getItems();\r\n\r\n\t\t\tthis.listen(this.parent, \"changed\", this.classChanged, this);\r\n\t\t},\r\n\t\tschemaLoaded: function (schema) {\r\n\t\t\t// schema is loaded\r\n\t\t\t// index all attributes for each type\r\n\t\t\tschema.getMixins().each(function (mixin) {\r\n\t\t\t\tvar c = {};\r\n\t\t\t\tthis.attributesByType[mixin.getName()] = c;\r\n\t\t\t\tmixin.getAttributes().getItems().each(function (att) {\r\n\t\t\t\t\tc[att.getName()] = att;\r\n\t\t\t\t}, this);\r\n\t\t\t}, this);\r\n\r\n\t\t\tschema.getTypes().each(function (type) {\r\n\t\t\t\tvar c = {};\r\n\t\t\t\tthis.attributesByType[type.getName()] = c;\r\n\t\t\t\ttype.getAttributes().getItems().each(function (att) {\r\n\t\t\t\t\tc[att.getName()] = att;\r\n\t\t\t\t}, this);\r\n\r\n\t\t\t\tvar tmpMixins = type.getMixins();\r\n\t\t\t\tif (tmpMixins) {\r\n\t\t\t\t\ttmpMixins.each(function (mixin) {\r\n\t\t\t\t\t\tCopyUtil.copyConfig(this.attributesByType[mixin], c);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\r\n\t\t\tthis.applyAttributesForClassName(this.constraintTable, this.parent.get(\"name\"));\r\n\t\t},\r\n\t\tapplyAttributesForClassName: function (constraintTable, newClassName) {\r\n\t\t\tconstraintTable.attributes.clear();\r\n\t\t\tif (newClassName) {\r\n\t\t\t\tvar cls = newClassName.substr(0, newClassName.indexOf(\"RestBean\"));\r\n\t\t\t\tvar atts = this.attributesByType[cls];\r\n\t\t\t\tif (atts) {\r\n\t\t\t\t\tfor (var attributeName in atts) {\r\n\t\t\t\t\t\tconstraintTable.attributes.add(atts[attributeName]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconstraintTable.applyRules(this.ruleFunctions);\r\n\t\t\t}\r\n\t\t},\r\n\t\tclassChanged: function (rs, member, newClassName, oldClassName) {\r\n\t\t\tif (\"name\" === member) {\r\n\t\t\t\tthis.applyAttributesForClassName(this.constraintTable, newClassName);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\treturn RuleBuilderView;","initMethod@STRING":"","proxy@STRING":"","moduleId@STRING":""}}